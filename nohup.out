{'train_params': {'lr': 0.005, 'weight_decay': 1e-05, 'scheduler_gamma': 0.95, 'gpus': [0], 'epochs': 50}, 'log': {'log_dir': 'logs', 'new_log': True}, 'data_params': {'data_dir': '../data/Data-V2', 'train_batch_size': 128, 'val_batch_size': 128, 'img_size': 224, 'num_workers': 6, 'if_check': False}, 'test_params': {'input_dir': './demo/input', 'output_dir': './demo/output', 'categories': {0: 'cat', 1: 'cow', 2: 'dog', 3: 'elephant', 4: 'gorilla', 5: 'hippo', 6: 'monkey', 7: 'panda', 8: 'tiger', 9: 'zebra'}}, 'model_params': {'layers_num': 50, 'pretrained': True, 'classes_num': 10}}
Sequential(
  (resnet): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Linear(in_features=2048, out_features=1000, bias=True)
  )
  (outputLayer): Sequential(
    (0): Linear(in_features=1000, out_features=256, bias=True)
    (1): ReLU()
    (2): Linear(in_features=256, out_features=10, bias=True)
  )
)
skip the check of all images
/home/wanghaoxuan/software/miniconda3/envs/pt/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.
  warnings.warn(
/home/wanghaoxuan/software/miniconda3/envs/pt/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
2022-12-14 07:41:27,289 INFO epoch0:train_loss:23.4040,train_acc:16643.0/19995.0=0.8324,valid_acc:913.0/995.0=0.9176,speed=223.9items/sec
2022-12-14 07:42:35,834 INFO epoch1:train_loss:0.8018,train_acc:18403.0/19995.0=0.9204,valid_acc:938.0/995.0=0.9427,speed=378.8items/sec
2022-12-14 07:43:42,642 INFO epoch2:train_loss:0.3803,train_acc:18750.0/19995.0=0.9377,valid_acc:888.0/995.0=0.8925,speed=378.7items/sec
2022-12-14 07:44:49,027 INFO epoch3:train_loss:0.3589,train_acc:18960.0/19995.0=0.9482,valid_acc:953.0/995.0=0.9578,speed=377.7items/sec
2022-12-14 07:45:55,642 INFO epoch4:train_loss:0.2723,train_acc:18904.0/19995.0=0.9454,valid_acc:951.0/995.0=0.9558,speed=379.9items/sec
2022-12-14 07:47:02,058 INFO epoch5:train_loss:0.1900,train_acc:19147.0/19995.0=0.9576,valid_acc:961.0/995.0=0.9658,speed=379.5items/sec
2022-12-14 07:48:08,465 INFO epoch6:train_loss:0.1647,train_acc:19247.0/19995.0=0.9626,valid_acc:955.0/995.0=0.9598,speed=377.3items/sec
2022-12-14 07:49:11,740 INFO epoch7:train_loss:0.1520,train_acc:19240.0/19995.0=0.9622,valid_acc:958.0/995.0=0.9628,speed=427.8items/sec
2022-12-14 07:50:18,336 INFO epoch8:train_loss:0.1404,train_acc:19339.0/19995.0=0.9672,valid_acc:961.0/995.0=0.9658,speed=379.1items/sec
2022-12-14 07:51:24,906 INFO epoch9:train_loss:0.1337,train_acc:19357.0/19995.0=0.9681,valid_acc:959.0/995.0=0.9638,speed=380.2items/sec
2022-12-14 07:52:31,180 INFO epoch10:train_loss:0.1266,train_acc:19396.0/19995.0=0.9700,valid_acc:962.0/995.0=0.9668,speed=379.2items/sec
2022-12-14 07:53:37,189 INFO epoch11:train_loss:0.1039,train_acc:19475.0/19995.0=0.9740,valid_acc:963.0/995.0=0.9678,speed=379.6items/sec
2022-12-14 07:54:44,164 INFO epoch12:train_loss:0.1007,train_acc:19458.0/19995.0=0.9731,valid_acc:961.0/995.0=0.9658,speed=377.6items/sec
2022-12-14 07:55:50,475 INFO epoch13:train_loss:0.0915,train_acc:19496.0/19995.0=0.9750,valid_acc:964.0/995.0=0.9688,speed=378.8items/sec
2022-12-14 07:56:52,848 INFO epoch14:train_loss:0.0850,train_acc:19532.0/19995.0=0.9768,valid_acc:965.0/995.0=0.9698,speed=410.3items/sec
2022-12-14 07:58:04,197 INFO epoch15:train_loss:0.0815,train_acc:19553.0/19995.0=0.9779,valid_acc:965.0/995.0=0.9698,speed=383.2items/sec
2022-12-14 07:59:14,082 INFO epoch16:train_loss:0.0780,train_acc:19575.0/19995.0=0.9790,valid_acc:959.0/995.0=0.9638,speed=379.2items/sec
2022-12-14 08:00:20,129 INFO epoch17:train_loss:0.0788,train_acc:19573.0/19995.0=0.9789,valid_acc:963.0/995.0=0.9678,speed=380.0items/sec
2022-12-14 08:01:27,703 INFO epoch18:train_loss:0.0684,train_acc:19608.0/19995.0=0.9806,valid_acc:967.0/995.0=0.9719,speed=377.7items/sec
2022-12-14 08:02:34,470 INFO epoch19:train_loss:0.0648,train_acc:19597.0/19995.0=0.9801,valid_acc:970.0/995.0=0.9749,speed=378.7items/sec
2022-12-14 08:03:40,923 INFO epoch20:train_loss:0.0675,train_acc:19606.0/19995.0=0.9805,valid_acc:967.0/995.0=0.9719,speed=378.2items/sec
2022-12-14 08:04:45,229 INFO epoch21:train_loss:0.0616,train_acc:19619.0/19995.0=0.9812,valid_acc:969.0/995.0=0.9739,speed=392.3items/sec
2022-12-14 08:05:50,273 INFO epoch22:train_loss:0.0589,train_acc:19646.0/19995.0=0.9825,valid_acc:968.0/995.0=0.9729,speed=396.5items/sec
2022-12-14 08:06:56,774 INFO epoch23:train_loss:0.0560,train_acc:19656.0/19995.0=0.9830,valid_acc:968.0/995.0=0.9729,speed=377.6items/sec
2022-12-14 08:08:04,150 INFO epoch24:train_loss:0.0558,train_acc:19671.0/19995.0=0.9838,valid_acc:969.0/995.0=0.9739,speed=378.4items/sec
2022-12-14 08:09:11,312 INFO epoch25:train_loss:0.0559,train_acc:19682.0/19995.0=0.9843,valid_acc:968.0/995.0=0.9729,speed=379.1items/sec
2022-12-14 08:10:19,141 INFO epoch26:train_loss:0.0537,train_acc:19680.0/19995.0=0.9842,valid_acc:971.0/995.0=0.9759,speed=378.9items/sec
2022-12-14 08:11:26,446 INFO epoch27:train_loss:0.0458,train_acc:19708.0/19995.0=0.9856,valid_acc:969.0/995.0=0.9739,speed=378.7items/sec
2022-12-14 08:12:32,486 INFO epoch28:train_loss:0.0500,train_acc:19715.0/19995.0=0.9860,valid_acc:968.0/995.0=0.9729,speed=381.4items/sec
2022-12-14 08:14:01,345 INFO epoch29:train_loss:0.0568,train_acc:19673.0/19995.0=0.9839,valid_acc:967.0/995.0=0.9719,speed=428.1items/sec
2022-12-14 08:15:09,749 INFO epoch30:train_loss:0.0458,train_acc:19725.0/19995.0=0.9865,valid_acc:967.0/995.0=0.9719,speed=381.4items/sec
2022-12-14 08:16:16,354 INFO epoch31:train_loss:0.0539,train_acc:19708.0/19995.0=0.9856,valid_acc:970.0/995.0=0.9749,speed=378.3items/sec
2022-12-14 08:17:23,357 INFO epoch32:train_loss:0.0462,train_acc:19712.0/19995.0=0.9858,valid_acc:969.0/995.0=0.9739,speed=378.3items/sec
2022-12-14 08:18:29,231 INFO epoch33:train_loss:0.0469,train_acc:19726.0/19995.0=0.9865,valid_acc:967.0/995.0=0.9719,speed=382.1items/sec
2022-12-14 08:19:35,839 INFO epoch34:train_loss:0.0442,train_acc:19740.0/19995.0=0.9872,valid_acc:964.0/995.0=0.9688,speed=381.9items/sec
2022-12-14 08:20:40,844 INFO epoch35:train_loss:0.0456,train_acc:19730.0/19995.0=0.9867,valid_acc:968.0/995.0=0.9729,speed=386.7items/sec
2022-12-14 08:21:45,404 INFO epoch36:train_loss:0.0452,train_acc:19711.0/19995.0=0.9858,valid_acc:968.0/995.0=0.9729,speed=404.5items/sec
2022-12-14 08:22:52,006 INFO epoch37:train_loss:0.0436,train_acc:19724.0/19995.0=0.9864,valid_acc:971.0/995.0=0.9759,speed=380.8items/sec
2022-12-14 08:23:58,156 INFO epoch38:train_loss:0.0453,train_acc:19714.0/19995.0=0.9859,valid_acc:970.0/995.0=0.9749,speed=384.2items/sec
2022-12-14 08:25:04,626 INFO epoch39:train_loss:0.0417,train_acc:19756.0/19995.0=0.9880,valid_acc:969.0/995.0=0.9739,speed=382.5items/sec
2022-12-14 08:26:12,164 INFO epoch40:train_loss:0.0428,train_acc:19750.0/19995.0=0.9877,valid_acc:971.0/995.0=0.9759,speed=382.1items/sec
2022-12-14 08:27:18,090 INFO epoch41:train_loss:0.0483,train_acc:19738.0/19995.0=0.9871,valid_acc:968.0/995.0=0.9729,speed=381.5items/sec
2022-12-14 08:28:23,841 INFO epoch42:train_loss:0.0384,train_acc:19759.0/19995.0=0.9882,valid_acc:971.0/995.0=0.9759,speed=381.3items/sec
2022-12-14 08:29:24,829 INFO epoch43:train_loss:0.0423,train_acc:19756.0/19995.0=0.9880,valid_acc:973.0/995.0=0.9779,speed=428.9items/sec
2022-12-14 08:30:32,111 INFO epoch44:train_loss:0.0388,train_acc:19768.0/19995.0=0.9886,valid_acc:967.0/995.0=0.9719,speed=379.1items/sec
2022-12-14 08:31:38,274 INFO epoch45:train_loss:0.0401,train_acc:19766.0/19995.0=0.9885,valid_acc:969.0/995.0=0.9739,speed=382.7items/sec
2022-12-14 08:32:44,546 INFO epoch46:train_loss:0.0608,train_acc:19742.0/19995.0=0.9873,valid_acc:969.0/995.0=0.9739,speed=380.2items/sec
2022-12-14 08:33:50,749 INFO epoch47:train_loss:0.0377,train_acc:19782.0/19995.0=0.9893,valid_acc:968.0/995.0=0.9729,speed=380.9items/sec
2022-12-14 08:34:56,589 INFO epoch48:train_loss:0.0371,train_acc:19785.0/19995.0=0.9895,valid_acc:967.0/995.0=0.9719,speed=380.2items/sec
2022-12-14 08:36:05,138 INFO epoch49:train_loss:0.0355,train_acc:19780.0/19995.0=0.9892,valid_acc:970.0/995.0=0.9749,speed=383.5items/sec
